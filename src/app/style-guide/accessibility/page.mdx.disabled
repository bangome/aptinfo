import Link from 'next/link';
import { Button } from '@/components/ui/button-enhanced';
import { ArrowLeft } from 'lucide-react';

<div className="container px-4 py-6 sm:py-8">
  <div className="max-w-4xl mx-auto">
    <div className="mb-6">
      <Link href="/style-guide">
        <Button variant="ghost" className="gap-2 p-0 h-auto">
          <ArrowLeft className="h-4 w-4" />
          스타일 가이드로 돌아가기
        </Button>
      </Link>
    </div>

# 접근성 가이드라인

아파트인포는 모든 사용자가 접근할 수 있는 웹 서비스를 만들기 위해 웹 접근성 표준(WCAG 2.1 AA)을 준수합니다.

## 색상과 대비

### 대비 비율
모든 텍스트는 WCAG 2.1 AA 기준을 만족하는 대비 비율을 유지합니다.

- **일반 텍스트**: 최소 4.5:1
- **큰 텍스트** (18pt 이상 또는 14pt bold): 최소 3:1
- **UI 컴포넌트**: 최소 3:1

### 색상 사용 원칙

```tsx
// ✅ 좋은 예: 색상과 함께 다른 시각적 단서 제공
<Badge variant="destructive" className="flex items-center gap-1">
  <X className="h-3 w-3" />
  실패
</Badge>

// ❌ 나쁜 예: 색상에만 의존
<span className="text-red-500">실패</span>
```

### 고대비 모드 지원

```css
/* High contrast mode support */
@media (prefers-contrast: high) {
  button, a, input, select {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }

  .card, [role="article"] {
    border: 2px solid currentColor !important;
  }
}
```

## 키보드 내비게이션

### 포커스 관리

모든 상호작용 가능한 요소는 키보드로 접근할 수 있어야 합니다.

```tsx
// ✅ 포커스 가능한 버튼
<Button className="focus-outline">
  클릭 가능한 버튼
</Button>

// ✅ 커스텀 클릭 핸들러가 있는 div는 button 역할 추가
<div
  role="button"
  tabIndex={0}
  onClick={handleClick}
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      handleClick();
    }
  }}
  className="focus-outline cursor-pointer"
>
  커스텀 버튼
</div>
```

### 포커스 순서

논리적인 포커스 순서를 유지합니다.

```tsx
// ✅ 논리적 포커스 순서
<form>
  <Input placeholder="이름" tabIndex={1} />
  <Input placeholder="이메일" tabIndex={2} />
  <Button type="submit" tabIndex={3}>제출</Button>
</form>
```

### 포커스 트랩

모달이나 드로어에서는 포커스를 트랩해야 합니다.

```tsx
import { FocusManager } from '@/utils/accessibility';

function Modal({ isOpen, onClose, children }) {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen && modalRef.current) {
      const cleanup = FocusManager.trapFocus(modalRef.current);
      return cleanup;
    }
  }, [isOpen]);

  return isOpen ? (
    <div ref={modalRef} role="dialog" aria-modal="true">
      {children}
    </div>
  ) : null;
}
```

## 스크린 리더 지원

### ARIA 라벨과 설명

```tsx
// ✅ 적절한 ARIA 라벨
<Button aria-label="검색" aria-describedby="search-help">
  <Search className="h-4 w-4" />
</Button>
<div id="search-help" className="sr-only">
  아파트명이나 지역명을 검색할 수 있습니다
</div>

// ✅ 동적 콘텐츠 공지
<div role="status" aria-live="polite">
  {isLoading ? '검색 중...' : `검색결과 ${results.length}개`}
</div>
```

### 스크린 리더 전용 텍스트

```css
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
```

```tsx
// ✅ 스크린 리더를 위한 추가 정보
<button>
  <Heart className="h-4 w-4" />
  <span className="sr-only">관심목록에 추가</span>
</button>
```

### 동적 콘텐츠 공지

```tsx
import { announceToScreenReader } from '@/utils/accessibility';

function SearchResults({ results, isLoading }) {
  useEffect(() => {
    if (!isLoading && results) {
      announceToScreenReader(
        `검색이 완료되었습니다. ${results.length}개의 결과가 있습니다.`,
        'polite'
      );
    }
  }, [results, isLoading]);

  return (
    <div>
      {/* 검색 결과 렌더링 */}
    </div>
  );
}
```

## 폼 접근성

### 라벨과 입력 필드 연결

```tsx
// ✅ 명시적 라벨 연결
<div>
  <label htmlFor="email" className="block text-sm font-medium">
    이메일 *
  </label>
  <Input
    id="email"
    type="email"
    required
    aria-describedby="email-error"
  />
  {error && (
    <div id="email-error" className="text-destructive text-sm mt-1">
      올바른 이메일을 입력해주세요
    </div>
  )}
</div>
```

### 폼 그룹화

```tsx
// ✅ fieldset과 legend 사용
<fieldset>
  <legend className="text-lg font-semibold mb-4">연락처 정보</legend>
  <div className="space-y-4">
    <Input placeholder="이름" />
    <Input placeholder="전화번호" />
  </div>
</fieldset>
```

### 에러 처리

```tsx
// ✅ 접근 가능한 에러 처리
<form onSubmit={handleSubmit} aria-describedby="form-errors">
  {errors.length > 0 && (
    <div id="form-errors" role="alert" className="bg-destructive/10 p-4 rounded-lg mb-4">
      <h3 className="font-semibold text-destructive mb-2">
        다음 오류를 수정해주세요:
      </h3>
      <ul className="list-disc list-inside space-y-1">
        {errors.map((error, index) => (
          <li key={index} className="text-destructive">{error}</li>
        ))}
      </ul>
    </div>
  )}
  {/* 폼 필드들 */}
</form>
```

## 반응형 및 모바일 접근성

### 터치 타겟 크기

모든 터치 타겟은 최소 44x44px 크기를 유지합니다.

```tsx
// ✅ 충분한 터치 타겟 크기
<Button size="sm" className="min-h-[44px] min-w-[44px]">
  작은 버튼
</Button>
```

### 스크롤 영역

```tsx
// ✅ 접근 가능한 스크롤 영역
<div
  className="overflow-y-auto max-h-96"
  role="region"
  aria-label="아파트 목록"
  tabIndex={0}
>
  {apartments.map(apartment => (
    <ApartmentCard key={apartment.id} apartment={apartment} />
  ))}
</div>
```

## 모션과 애니메이션

### 모션 감소 지원

```css
/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .motion-reduce {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
```

```tsx
// ✅ 모션 감소 설정 확인
import { prefersReducedMotion } from '@/utils/accessibility';

function AnimatedComponent() {
  const shouldReduceMotion = prefersReducedMotion();

  return (
    <div
      className={cn(
        "transition-transform duration-300",
        shouldReduceMotion && "motion-reduce"
      )}
    >
      애니메이션 콘텐츠
    </div>
  );
}
```

## 이미지와 미디어

### 대체 텍스트

```tsx
// ✅ 의미 있는 alt 텍스트
<Image
  src="/apartment.jpg"
  alt="강남구 논현동 래미안 퍼스티지 외관, 25층 고층 아파트"
  width={400}
  height={300}
/>

// ✅ 장식용 이미지
<Image
  src="/decoration.jpg"
  alt=""
  width={100}
  height={100}
  role="presentation"
/>
```

### 비디오 접근성

```tsx
// ✅ 접근 가능한 비디오
<video controls>
  <source src="/apartment-tour.mp4" type="video/mp4" />
  <track
    kind="captions"
    src="/captions-ko.vtt"
    srcLang="ko"
    label="Korean"
    default
  />
  브라우저가 비디오를 지원하지 않습니다.
</video>
```

## 테스트

### 자동화된 접근성 테스트

```bash
# axe-core를 사용한 접근성 테스트
npm install --save-dev @axe-core/react jest-axe

# 테스트 실행
npm run test:a11y
```

```tsx
// 컴포넌트 접근성 테스트
import { render } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

test('should not have accessibility violations', async () => {
  const { container } = render(<Button>테스트 버튼</Button>);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});
```

### 수동 테스트 체크리스트

1. **키보드 테스트**
   - [ ] Tab키로 모든 상호작용 요소에 접근 가능
   - [ ] Enter/Space키로 버튼 활성화 가능
   - [ ] Escape키로 모달 닫기 가능
   - [ ] 화살표 키로 메뉴 탐색 가능

2. **스크린 리더 테스트**
   - [ ] 모든 콘텐츠가 의미 있게 읽힘
   - [ ] 페이지 구조가 논리적
   - [ ] 폼 라벨과 에러가 적절히 연결됨
   - [ ] 동적 변경사항이 공지됨

3. **시각적 테스트**
   - [ ] 고대비 모드에서 사용 가능
   - [ ] 200% 확대에서 사용 가능
   - [ ] 색상 없이도 정보 전달 가능

## 접근성 유틸리티 함수

### 컴포넌트에서 사용 가능한 유틸리티

```tsx
import {
  announceToScreenReader,
  FocusManager,
  prefersReducedMotion,
  prefersHighContrast,
  generateAriaId
} from '@/utils/accessibility';

// 스크린 리더 공지
announceToScreenReader('검색이 완료되었습니다', 'polite');

// 포커스 관리
const cleanup = FocusManager.trapFocus(modalElement);

// 사용자 설정 확인
const reduceMotion = prefersReducedMotion();
const highContrast = prefersHighContrast();

// 고유 ID 생성
const labelId = generateAriaId('search-label');
```

## 브라우저 지원

### 지원 범위
- **모던 브라우저**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **스크린 리더**: NVDA, JAWS, VoiceOver, TalkBack
- **키보드 내비게이션**: 모든 지원 브라우저

### 폴리필

```tsx
// focus-visible 폴리필
import 'focus-visible';

// IntersectionObserver 폴리필
import 'intersection-observer';
```

## 참고 자료

- [WCAG 2.1 가이드라인](https://www.w3.org/WAI/WCAG21/quickref/)
- [ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/)
- [WebAIM 접근성 체크리스트](https://webaim.org/standards/wcag/checklist)
- [한국 웹 접근성 인증마크](https://www.wa.or.kr/)

</div>
</div>