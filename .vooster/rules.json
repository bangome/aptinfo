{
  "rules": [
    {
      "type": "prd",
      "content": "# 아파트 정보 통합 검색 서비스 PRD\n\n## 1. 제품 개요\n전국 아파트의 기본 정보를 한곳에서 검색‧열람하고, 각 용어의 의미를 친절히 설명해 주는 웹 기반 서비스입니다. 예비 입주자·입주민·부동산 중개사·투자자가 쉽고 빠르게 의사결정을 내릴 수 있도록 돕습니다.\n\n## 2. 목표\n1. 전국 단지 정보를 3초 내 검색·노출\n2. 사용자가 원하는 단지 상세 정보를 1분 이내 파악\n3. 출시 3개월 내 월간 활성 사용자(MAU) 1만 명 달성\n4. 출시 6개월 내 부동산 중개사(B2B) 30곳 라이선스 계약\n\n## 3. 핵심 문제(Pain Point)\n• 아파트 정보가 여러 사이트에 흩어져 있어 한눈에 보기 어렵다.\n\n## 4. 사용자(Persona)\n1. 예비 입주자(30대, 신혼부부)\n2. 현 입주민(40대, 자녀 교육환경 관심)\n3. 부동산 중개사(현장 상담용 고급 정보 필요)\n4. 투자자(데이터 기반 비교·분석 선호)\n\n## 5. 주요 사용 시나리오(Use Case)\n1. 매매·전세 결정 전 단지 정보를 확인한다.\n2. 거주 중인 단지의 시설·관리 정보를 파악한다.\n3. 고객 상담 시 빠르게 상세 정보를 제시한다.\n4. 여러 단지를 비교해 투자 수익성을 검토한다.\n\n## 6. 기능 정의\n### 6.1 MVP 기능\n| 분류 | 기능 | 설명 | 우선순위 |\n|---|---|---|---|\n|검색|전국 아파트 검색·필터링|단지명, 지역, 분양 형태 등 필터|P0|\n|상세|아파트 기본 정보 상세 보기|보유 데이터 전부 노출|P0|\n|설명|정보 의미 툴팁·용어사전|용어 위에 호버 시 간단 설명|P0|\n\n### 6.2 차별화(차후 버전)\n|기능|설명|우선순위|\n|---|---|---|\n|단지 비교 차트|최대 3개 단지를 항목별 그래프로 비교|P1|\n|관심 단지 즐겨찾기|북마크 후 리스트 관리|P1|\n|실시간 뉴스·공시 연동|단지 관련 뉴스 API 노출|P2|\n|통계 시각화|관리비 평균, 주차대수 그래프|P2|\n\n## 7. 비즈니스 모델\n• 부동산 중개사용 B2B 라이선스 판매(주요 수익)\n• 프리미엄 리포트·데이터 다운로드 유료(부가 수익)\n\n## 8. 개발 전략\nMVP → 사용자 피드백 수집 → 2주 단위 개선(애자일)\n\n## 9. 기술 스택\nNext.js 15, TypeScript, TailwindCSS, shadcn, lucide-react, Supabase(PostgreSQL), @tanstack/react-query, date-fns, es-toolkit\n\n## 10. 성공 지표\n| 지표 | 목표값 |\n|---|---|\n|검색→상세 전환율|≥ 70%|\n|평균 세션 길이|≥ 3분|\n|재방문율(30일)|≥ 25%|\n|B2B 라이선스 문의 건|≥ 100건/6개월|\n\n## 11. 일정(고수준)\n| 구분 | 기간 | 산출물 |\n|---|---|---|\n|기획·디자인|1주|와이어프레임, PRD(본 문서)|\n|MVP 개발|3주|검색·상세·툴팁 기능|\n|베타 테스트|1주|피드백 리포트|\n|정식 런칭|—|v1.0 서비스|\n\n## 12. 리스크 & 대응\n1. 데이터 최신성 ↓ → 월 1회 자동 크롤링·검수\n2. 법적 이슈(부동산 정보 사용) → 공공 DB 사용 근거 확보, 저작권 검토\n3. 초기 트래픽 급증 → Supabase 스케일 플랜 대비\n\n## 13. 향후 로드맵(6~12개월)\n• AI 챗봇 질의응답\n• 관리비 예측 모델\n• 모바일 전용 앱",
      "writedAt": "2025-09-16T08:42:29.792Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## 1. Executive Technical Summary\n- **Project Overview**: 전국 아파트 정보를 통합 검색하고 제공하는 웹 서비스 개발. 사용자에게 필요한 정보를 쉽고 빠르게 제공하며, 부동산 중개사를 위한 B2B 라이선스 모델을 지원한다.\n- **Core Technology Stack**: Next.js 15 (TypeScript), TailwindCSS, shadcn, lucide-react, Supabase, @tanstack/react-query, date-fns, es-toolkit을 사용하여 빠르고 효율적인 웹 애플리케이션을 구축한다.\n- **Key Technical Objectives**: 빠른 검색 속도(3초 이내), 사용자 친화적인 인터페이스, 높은 트래픽 처리 능력, 데이터 최신성 유지, 안정적인 B2B 라이선스 시스템 구축을 목표로 한다.\n- **Critical Technical Assumptions**: 전국 아파트 정보 데이터베이스가 Supabase에 구축되어 있으며, API를 통해 접근 가능하다는 전제하에 개발을 진행한다. 공공 데이터베이스 사용 근거 및 저작권 문제를 해결해야 한다.\n\n## 2. Tech Stack\n\n| Category          | Technology / Library        | Reasoning (Why it's chosen for this project) |\n| ----------------- | --------------------------- | -------------------------------------------- |\n| Framework         | Next.js 15                  | 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG) 지원, 초기 로딩 속도 개선 및 SEO 최적화. 빠른 개발 속도 및 확장성 제공 |\n| Language          | TypeScript                  | 타입 안정성 강화, 코드 품질 향상, 유지보수 용이 |\n| UI Framework      | TailwindCSS                 | 유틸리티 기반 CSS 프레임워크, 빠른 스타일링 및 일관성 유지 |\n| UI Components     | shadcn                      | 재사용 가능한 UI 컴포넌트 제공, 개발 생산성 향상 및 디자인 시스템 유지 |\n| Icon Library      | lucide-react                | 고품질 아이콘 제공, UI 일관성 및 사용자 경험 향상 |\n| Database          | Supabase (PostgreSQL)       | 확장성, 안정성, 실시간 데이터 처리 지원, 비용 효율적 |\n| Data Fetching     | @tanstack/react-query       | 효율적인 데이터 fetching 및 캐싱, 사용자 경험 향상 |\n| Utility Library   | es-toolkit                  | 다양한 유틸리티 함수 제공, 개발 편의성 증대 |\n| Date Manipulation | date-fns                    | 날짜 및 시간 관련 기능 제공, 정확하고 효율적인 날짜 처리 |\n\n## 3. System Architecture Design\n\n### Top-Level building blocks\n- **Frontend (Next.js Application)**:\n    - 사용자 인터페이스 및 상호 작용 처리\n    - 컴포넌트 기반 아키텍처 (shadcn 활용)\n    - 서버 사이드 렌더링 (SSR) 및 정적 사이트 생성 (SSG)\n    - 하위 빌딩 블록: UI 컴포넌트, 페이지 라우팅, 상태 관리, API 호출\n- **Backend (Supabase)**:\n    - 데이터베이스 관리 (PostgreSQL)\n    - API 엔드포인트 제공 (Supabase Functions)\n    - 사용자 인증 및 권한 관리\n    - 하위 빌딩 블록: 데이터 모델, API 엔드포인트, 인증 로직, 데이터 처리 로직\n- **External APIs**:\n    - 공공 데이터 포털 API 연동 (아파트 정보)\n    - 실시간 뉴스 API 연동 (차후 버전)\n    - 하위 빌딩 블록: API 클라이언트, 데이터 파싱 로직, 에러 처리 로직\n\n### Top-Level Component Interaction Diagram\n\n```mermaid\ngraph LR\n    A[사용자] --> B(Frontend: Next.js)\n    B --> C(Backend: Supabase API)\n    C --> D(Database: PostgreSQL)\n    B --> E[External APIs]\n```\n\n- 사용자는 Frontend (Next.js)를 통해 서비스에 접근하고 검색 및 상세 정보 요청을 수행합니다.\n- Frontend는 Backend (Supabase API)에 API 요청을 보내 데이터베이스에 접근합니다.\n- Backend는 데이터베이스 (PostgreSQL)에서 필요한 데이터를 조회하고 Frontend에 응답합니다.\n- Frontend는 External APIs를 통해 외부 데이터를 가져와 사용자에게 제공합니다.\n\n### Code Organization & Convention\n**Domain-Driven Organization Strategy**\n- **Domain Separation**: 사용자 관리, 아파트 정보 관리, 검색 기능 등으로 도메인 분리\n- **Layer-Based Architecture**: UI 컴포넌트, 비즈니스 로직, 데이터 접근 레이어로 분리\n- **Feature-Based Modules**: 각 기능별 모듈 (예: 검색, 상세 페이지, 비교 차트)\n- **Shared Components**: 공통 UI 컴포넌트, 유틸리티 함수, 타입 정의\n\n**Universal File & Folder Structure**\n```\n/\n├── components/             # 재사용 가능한 UI 컴포넌트\n│   ├── ApartmentCard.tsx     # 아파트 정보 카드 컴포넌트\n│   ├── SearchBar.tsx         # 검색 바 컴포넌트\n│   └── ...\n├── pages/                  # Next.js 페이지\n│   ├── index.tsx           # 메인 페이지 (검색)\n│   ├── apartments/\n│   │   └── [id].tsx        # 아파트 상세 페이지\n│   └── ...\n├── services/               # API 호출 및 데이터 처리 로직\n│   ├── apartmentService.ts # 아파트 정보 관련 API 호출\n│   └── ...\n├── utils/                  # 유틸리티 함수\n│   ├── dateUtils.ts        # 날짜 관련 유틸리티\n│   └── ...\n├── types/                  # TypeScript 타입 정의\n│   ├── Apartment.ts        # 아파트 정보 타입\n│   └── ...\n├── styles/                 # CSS 스타일 (TailwindCSS)\n│   ├── globals.css         # 전역 스타일\n│   └── tailwind.config.js  # TailwindCSS 설정\n├── public/                 # 정적 파일 (이미지, 폰트 등)\n├── .env.local              # 환경 변수\n├── tsconfig.json           # TypeScript 설정\n└── package.json            # 프로젝트 설정\n```\n\n### Data Flow & Communication Patterns\n- **Client-Server Communication**: Next.js API Routes를 통해 클라이언트와 서버 간 통신\n- **Database Interaction**: Supabase 클라이언트를 사용하여 PostgreSQL 데이터베이스에 접근\n- **External Service Integration**: Axios 또는 Fetch API를 사용하여 외부 API 호출\n- **Data Synchronization**: @tanstack/react-query를 사용하여 서버 상태 관리 및 데이터 동기화\n\n## 4. Performance & Optimization Strategy\n- Next.js의 SSR 및 SSG 기능을 활용하여 초기 로딩 속도 최적화\n- 이미지 최적화 및 Lazy Loading 적용\n- @tanstack/react-query를 사용하여 API 응답 캐싱\n- 데이터베이스 쿼리 최적화 및 인덱싱\n- CDN을 사용하여 정적 자산 배포\n\n## 5. Implementation Roadmap & Milestones\n### Phase 1: Foundation (MVP Implementation)\n- **Core Infrastructure**: Next.js 프로젝트 설정, Supabase 데이터베이스 구축, 기본 UI 컴포넌트 개발\n- **Essential Features**: 전국 아파트 검색 기능, 아파트 기본 정보 상세 보기 기능, 정보 의미 툴팁 기능\n- **Basic Security**: 사용자 인증 및 권한 관리 (Supabase Auth 활용)\n- **Development Setup**: 개발 환경 설정, CI/CD 파이프라인 구축 (GitHub Actions)\n- **Timeline**: 3주\n\n### Phase 2: Feature Enhancement\n- **Advanced Features**: 단지 비교 차트 기능, 관심 단지 즐겨찾기 기능\n- **Performance Optimization**: 시스템 성능 개선 및 코드 최적화\n- **Enhanced Security**: 보안 취약점 점검 및 개선, 데이터 암호화\n- **Monitoring Implementation**: 서비스 모니터링 시스템 구축 (Supabase Observability 활용)\n- **Timeline**: 4주\n\n## 6. Risk Assessment & Mitigation Strategies\n### Technical Risk Analysis\n- **Technology Risks**: Supabase 및 Next.js 관련 기술적 문제 발생 가능성\n    - **Mitigation Strategies**: Supabase 및 Next.js 공식 문서 및 커뮤니티 활용, 기술 지원 계약\n- **Performance Risks**: 데이터 증가에 따른 검색 성능 저하 가능성\n    - **Mitigation Strategies**: 데이터베이스 인덱싱, 캐싱 전략, 코드 최적화\n- **Security Risks**: 데이터 유출 및 해킹 시도 가능성\n    - **Mitigation Strategies**: 데이터 암호화, 보안 취약점 점검, 접근 제어 강화\n- **Integration Risks**: 외부 API 연동 실패 가능성\n    - **Mitigation Strategies**: API 사용량 제한 설정, 에러 처리 로직 구현, 대체 API 확보\n\n### Project Delivery Risks\n- **Timeline Risks**: 개발 일정 지연 가능성\n    - **Contingency Plans**: 우선순위 재조정, 추가 개발 인력 투입\n- **Resource Risks**: 개발 인력 부족 가능성\n    - **Contingency Plans**: 외부 개발 업체 활용, 팀 내 기술 교육 강화\n- **Quality Risks**: 코드 품질 저하 가능성\n    - **Contingency Plans**: 코드 리뷰 강화, 자동화 테스트 도입\n- **Deployment Risks**: 배포 과정 중 문제 발생 가능성\n    - **Contingency Plans**: 배포 전 충분한 테스트, 롤백 전략 수립\n",
      "writedAt": "2025-09-16T08:42:29.792Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-09-16T08:42:29.792Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-16T08:42:29.792Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-16T08:42:29.792Z"
    }
  ]
}